Directory Tree:
hospital-directions-vite/
│   ├── .env
│   ├── .pnp.cjs
│   ├── .pnp.loader.mjs
│   ├── components.json
│   ├── eslint.config.js
│   ├── index.html
│   ├── postcss.config.js
│   ├── README.md
│   ├── tailwind.config.js
│   ├── tsconfig.app.json
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   ├── vite.config.ts
│   ├── node_modules/ [EXCLUDED]
│   ├── public/
│   │   ├── bwh-logo-icon.svg
│   │   ├── placeholder-logo.png
│   │   ├── placeholder-logo.svg
│   │   ├── placeholder-user.jpg
│   │   ├── placeholder.jpg
│   │   ├── placeholder.svg
│   │   ├── vite.svg
│   ├── src/
│   │   ├── App.tsx
│   │   ├── index.css
│   │   ├── main.tsx
│   │   ├── components/
│   │   │   ├── Layout.tsx
│   │   │   ├── theme-provider.tsx
│   │   │   ├── map/
│   │   │   │   ├── Map.tsx
│   │   │   ├── ui/
│   │   │   │   ├── avatar.tsx
│   │   │   │   ├── badge.tsx
│   │   │   │   ├── button.tsx
│   │   │   │   ├── card.tsx
│   │   │   │   ├── dropdown-menu.tsx
│   │   │   │   ├── input.tsx
│   │   │   │   ├── scroll-area.tsx
│   │   │   │   ├── tabs.tsx
│   │   ├── lib/
│   │   │   ├── constants.ts
│   │   │   ├── hooks.ts
│   │   │   ├── utils.ts
│   │   ├── types/
│   │   │   ├── hospital.ts




# ======================
# File: components.json
# ======================

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

# ======================
# File: index.html
# ======================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


# ======================
# File: README.md
# ======================

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```


# ======================
# File: tsconfig.app.json
# ======================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    /* Paths */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}


# ======================
# File: tsconfig.json
# ======================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}


# ======================
# File: tsconfig.node.json
# ======================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


# ======================
# File: vite.config.ts
# ======================

import path from "path"
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})


# ======================
# File: src\App.tsx
# ======================

"use client"

import { useState, useMemo, useCallback } from "react"
import { Navigation } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useHospitalSearch } from "@/lib/hooks"
import { hospitalLocations, mockDirections } from "@/lib/constants"
import { AppHeader, SidebarContainer } from "@/components/Layout"
import {
  MapProvider,
  MapControls,
  MapMarkers,
  DistanceInfo,
  HospitalList,
  SearchInput,
  DirectionsCard,
} from "@/components/map/Map"

export default function App() {
  // State management
  const [activeTab, setActiveTab] = useState<"list" | "directions">("list")
  const [sidebarOpen, setSidebarOpen] = useState(true)

  // Custom hooks
  const { searchQuery, setSearchQuery, filteredHospitals } = useHospitalSearch(hospitalLocations)

  // Event handlers
  const toggleSidebar = useCallback(() => {
    setSidebarOpen((prev) => !prev)
  }, [])

  const handleClearSearch = useCallback(() => {
    setSearchQuery("")
  }, [setSearchQuery])

  // Sidebar content
  const sidebarContent = useMemo(
    () => (
      <div className="flex flex-col gap-4">
        <SearchInput value={searchQuery} onChange={setSearchQuery} placeholder="Search hospitals..." />

        <Button size="sm" className="h-10 gap-1 w-full text-sm">
          <Navigation className="h-4 w-4" />
          <span>My Location</span>
        </Button>

        <Tabs
          value={activeTab}
          onValueChange={(value) => setActiveTab(value as "list" | "directions")}
          className="w-full"
        >
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="list">List View</TabsTrigger>
            <TabsTrigger value="directions">Directions</TabsTrigger>
          </TabsList>
          <TabsContent value="list" className="mt-2">
            <HospitalList hospitals={filteredHospitals} searchQuery={searchQuery} onClearSearch={handleClearSearch} />
          </TabsContent>
          <TabsContent value="directions">
            <DirectionsCard hospital={hospitalLocations[0]} directions={mockDirections} />
          </TabsContent>
        </Tabs>
      </div>
    ),
    [activeTab, filteredHospitals, handleClearSearch, searchQuery, setSearchQuery],
  )

  return (
    <MapProvider initialHospital={hospitalLocations[0]}>
      <div className="relative min-h-screen overflow-hidden">
        {/* Header */}
        <AppHeader isSidebarOpen={sidebarOpen} onToggleSidebar={toggleSidebar} />

        {/* Main content */}
        <div className="relative pt-16 min-h-screen">
          {/* Sidebar */}
          <SidebarContainer isOpen={sidebarOpen}>{sidebarContent}</SidebarContainer>

          {/* Map background */}
          <div className="fixed inset-0 z-0">
            <img src="/map-background.png" alt="Map" className="w-full h-full object-cover" />
          </div>

          {/* Map components */}
          <MapMarkers hospitals={hospitalLocations} />
          <MapControls />
          <DistanceInfo />
        </div>
      </div>
    </MapProvider>
  )
}


# ======================
# File: src\index.css
# ======================

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 60 100% 100%;
    --foreground: 205 11% 4%;
    --card: 60 100% 100%;
    --card-foreground: 205 11% 4%;
    --popover: 60 100% 100%;
    --popover-foreground: 205 11% 4%;
    --primary: 205 100% 22%;
    --primary-foreground: 204 9% 95%;
    --secondary: 205 25% 62%;
    --secondary-foreground: 205 25% 10%;
    --muted: 205 25% 62%;
    --muted-foreground: 205 25% 22%;
    --accent: 209 44% 78%;
    --accent-foreground: 209 43% 10%;
    --destructive: 357 99% 45%;
    --destructive-foreground: 0 0% 100%;
    --border: 2 6% 90%;
    --input: 2 6% 90%;
    --ring: 205 100% 22%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 205 30% 8%;
    --foreground: 204 9% 95%;
    --card: 205 30% 12%;
    --card-foreground: 204 9% 95%;
    --popover: 205 30% 12%;
    --popover-foreground: 204 9% 95%;
    --primary: 205 91% 40%;
    --primary-foreground: 204 9% 95%;
    --secondary: 205 26% 15%;
    --secondary-foreground: 205 23% 95%;
    --muted: 205 26% 15%;
    --muted-foreground: 205 15% 65%;
    --accent: 209 49% 68%;
    --accent-foreground: 209 49% 10%;
    --destructive: 0 70% 45%;
    --destructive-foreground: 0 0% 100%;
    --border: 205 30% 18%;
    --input: 205 30% 18%;
    --ring: 205 91% 40%;
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom scrollbar styling */
.scrollbar-thin {
  scrollbar-width: thin;
  scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 4px;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.15);
  border-radius: 20px;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.25);
}


# ======================
# File: src\main.tsx
# ======================

import React from "react"
import ReactDOM from "react-dom/client"
import App from "./App.tsx"
import "./index.css"
import { ThemeProvider } from "./components/theme-provider.tsx"

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
      <App />
    </ThemeProvider>
  </React.StrictMode>,
)


# ======================
# File: src\components\Layout.tsx
# ======================

"use client"

import { useState, useEffect, useRef, type ReactNode } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Menu, X, Search, Bell } from "lucide-react"
import { cn } from "@/lib/utils"
import { Z_INDEX } from "@/lib/constants"

// ==================== APP HEADER ====================

interface AppHeaderProps {
  isSidebarOpen: boolean
  onToggleSidebar: () => void
}

export function AppHeader({ isSidebarOpen, onToggleSidebar }: AppHeaderProps) {
  return (
    <header className="fixed top-0 left-0 right-0 bg-background border-b" style={{ zIndex: Z_INDEX.header }}>
      <div className="container flex h-16 items-center justify-between px-4">
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="icon" onClick={onToggleSidebar}>
            {isSidebarOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            <span className="sr-only">{isSidebarOpen ? "Close sidebar" : "Open sidebar"}</span>
          </Button>
          <HospitalLogo />
        </div>

        <div className="flex items-center gap-2">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input type="text" placeholder="Search..." className="w-[200px] rounded-md pl-8 pr-4" aria-label="Search" />
          </div>
          <Button variant="outline" size="icon" className="rounded-md" aria-label="Notifications">
            <Bell className="h-4 w-4" />
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="rounded-full" aria-label="User menu">
                <Avatar className="h-8 w-8">
                  <AvatarImage src="/vibrant-street-market.png" alt="User avatar" />
                  <AvatarFallback>U</AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>Profile</DropdownMenuItem>
              <DropdownMenuItem>Settings</DropdownMenuItem>
              <DropdownMenuItem>Sign out</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  )
}

// Hospital Logo Component
function HospitalLogo({ className }: { className?: string }) {
  return (
    <a href="/" className={cn("flex items-center gap-2 group", className)}>
      <img src="/bwh-logo-icon.svg" alt="BWH Logo" className="h-12 w-auto" />
      <div className="flex flex-col">
        <span className="text-lg font-bold leading-tight text-primary group-hover:text-primary/90 transition-colors">
          Brigham and Women's
        </span>
        <span className="text-base leading-tight text-primary group-hover:text-primary/90 transition-colors">
          Hospital
        </span>
      </div>
    </a>
  )
}

// ==================== SIDEBAR CONTAINER ====================

interface SidebarContainerProps {
  children: ReactNode
  isOpen: boolean
  className?: string
}

export function SidebarContainer({ children, isOpen, className }: SidebarContainerProps) {
  const contentRef = useRef<HTMLDivElement>(null)
  const [contentHeight, setContentHeight] = useState<number | undefined>(undefined)

  // Calculate available height and update when window resizes
  useEffect(() => {
    const calculateHeights = () => {
      const headerHeight = 64 // 64px header
      const bottomPadding = 16 // 16px padding at bottom
      const availableHeight = window.innerHeight - headerHeight - bottomPadding

      if (contentRef.current) {
        const actualContentHeight = contentRef.current.scrollHeight

        if (actualContentHeight < availableHeight - 32) {
          setContentHeight(undefined) // Use auto height
        } else {
          setContentHeight(availableHeight - 32) // Fixed height with scrolling
        }
      }
    }

    calculateHeights()
    window.addEventListener("resize", calculateHeights)

    // Add mutation observer to detect DOM changes
    const mutationObserver = new MutationObserver(calculateHeights)
    if (contentRef.current) {
      mutationObserver.observe(contentRef.current, {
        childList: true,
        subtree: true,
        attributes: true,
      })
    }

    return () => {
      window.removeEventListener("resize", calculateHeights)
      mutationObserver.disconnect()
    }
  }, [])

  return (
    <div
      className={cn(
        "fixed top-16 left-0 z-30 w-[420px]",
        "transition-all duration-300 ease-in-out",
        !isOpen && "-translate-x-full",
        className,
      )}
      style={{
        maxHeight: `calc(100vh - 64px)`,
        padding: "1rem",
      }}
    >
      <div
        className="w-full bg-white rounded-xl shadow-xl border border-gray-100 overflow-hidden"
        style={{
          padding: "0.5rem",
          height: contentHeight === undefined ? "auto" : "auto",
          maxHeight: contentHeight ? `${contentHeight}px` : "calc(100vh - 64px - 32px)",
        }}
      >
        <div
          ref={contentRef}
          className="w-full overflow-y-auto rounded-lg bg-white scrollbar-thin"
          style={{
            padding: "0.75rem",
            height: contentHeight === undefined ? "auto" : `${contentHeight}px`,
            maxHeight: contentHeight === undefined ? "auto" : `${contentHeight}px`,
          }}
        >
          {children}
        </div>
      </div>
    </div>
  )
}


# ======================
# File: src\components\theme-provider.tsx
# ======================

"use client"

import type React from "react"

import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(() => (localStorage.getItem(storageKey) as Theme) || defaultTheme)

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined) throw new Error("useTheme must be used within a ThemeProvider")

  return context
}


# ======================
# File: src\components\map\Map.tsx
# ======================

"use client"

import { createContext, useContext, useState, useCallback, useMemo, type ReactNode } from "react"
import {
  Plus,
  Minus,
  MapPin,
  Navigation,
  Clock,
  Phone,
  ExternalLink,
  Search,
  X,
  Volume2,
  ArrowRight,
} from "lucide-react"
import { Car, FootprintsIcon as Walking, Train } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { cn } from "@/lib/utils"
import type { Hospital, Directions, TransportMode } from "@/types/hospital"

// ==================== CONTEXT ====================

interface MapContextType {
  selectedLocation: Hospital | null
  setSelectedLocation: (hospital: Hospital) => void
  transportMode: TransportMode
  setTransportMode: (mode: TransportMode) => void
  zoom: number
  zoomIn: () => void
  zoomOut: () => void
  isMinZoom: boolean
  isMaxZoom: boolean
}

const MapContext = createContext<MapContextType | undefined>(undefined)

export function useMap() {
  const context = useContext(MapContext)
  if (!context) {
    throw new Error("useMap must be used within a MapProvider")
  }
  return context
}

interface MapProviderProps {
  children: ReactNode
  initialHospital?: Hospital | null
}

export function MapProvider({ children, initialHospital = null }: MapProviderProps) {
  const [selectedLocation, setSelectedLocation] = useState<Hospital | null>(initialHospital)
  const [transportMode, setTransportMode] = useState<TransportMode>("drive")
  const [zoom, setZoom] = useState(12)

  const zoomIn = useCallback(() => {
    if (zoom < 18) {
      setZoom((prevZoom) => Math.min(prevZoom + 1, 18))
    }
  }, [zoom])

  const zoomOut = useCallback(() => {
    if (zoom > 8) {
      setZoom((prevZoom) => Math.max(prevZoom - 1, 8))
    }
  }, [zoom])

  const value = {
    selectedLocation,
    setSelectedLocation,
    transportMode,
    setTransportMode,
    zoom,
    zoomIn,
    zoomOut,
    isMinZoom: zoom <= 8,
    isMaxZoom: zoom >= 18,
  }

  return <MapContext.Provider value={value}>{children}</MapContext.Provider>
}

// ==================== MAP COMPONENTS ====================

// Map Controls Component
export function MapControls() {
  const { zoomIn, zoomOut, isMinZoom, isMaxZoom } = useMap()

  return (
    <div className="absolute bottom-8 right-8 flex flex-col gap-2">
      <Button
        variant="outline"
        size="icon"
        className="h-10 w-10 rounded-md shadow-md bg-white border-gray-200 hover:bg-gray-50 text-primary"
        aria-label="Zoom in"
        onClick={zoomIn}
        disabled={isMaxZoom}
      >
        <Plus className="h-5 w-5" />
      </Button>
      <Button
        variant="outline"
        size="icon"
        className="h-10 w-10 rounded-md shadow-md bg-white border-gray-200 hover:bg-gray-50 text-primary"
        aria-label="Zoom out"
        onClick={zoomOut}
        disabled={isMinZoom}
      >
        <Minus className="h-5 w-5" />
      </Button>
    </div>
  )
}

// Map Markers Component
export function MapMarkers({ hospitals }: { hospitals: Hospital[] }) {
  const { selectedLocation } = useMap()

  return (
    <div className="absolute inset-0 z-10 pointer-events-none">
      {/* Hospital location markers */}
      {hospitals.map((hospital, index) => (
        <div key={hospital.id} className={`absolute ${getMarkerPosition(index)} h-10 w-10 pointer-events-auto`}>
          <div className="absolute -translate-x-1/2 -translate-y-1/2">
            <div
              className={`h-6 w-6 rounded-full ${selectedLocation?.id === hospital.id ? "bg-accent" : "bg-primary"} flex items-center justify-center text-primary-foreground text-xs font-bold shadow-lg`}
            >
              {index + 1}
            </div>
            <div
              className={`absolute -bottom-1 left-1/2 -translate-x-1/2 w-0 h-0 border-l-[6px] border-l-transparent border-t-[8px] ${selectedLocation?.id === hospital.id ? "border-t-accent" : "border-t-primary"} border-r-[6px] border-r-transparent`}
            ></div>
          </div>
        </div>
      ))}

      {/* User location marker */}
      <div className="absolute top-1/2 left-1/2 pointer-events-auto">
        <div className="absolute -translate-x-1/2 -translate-y-1/2">
          <div className="h-4 w-4 rounded-full bg-accent border-2 border-white shadow-lg"></div>
        </div>
      </div>
    </div>
  )
}

// Helper function to position markers
function getMarkerPosition(index: number): string {
  const positions = ["top-1/4 left-1/4", "top-1/3 right-1/3", "bottom-1/4 left-1/3", "bottom-1/3 right-1/4"]
  return positions[index % positions.length]
}

// Distance Info Component
export function DistanceInfo() {
  const { selectedLocation } = useMap()

  if (!selectedLocation) return null

  return (
    <Card className="absolute top-24 right-8 z-10 shadow-lg">
      <CardContent className="p-4">
        <p className="font-medium">Distance: {selectedLocation.distance}</p>
        <p className="text-muted-foreground text-sm">Est. travel time: {selectedLocation.estimatedTime} by car</p>
      </CardContent>
    </Card>
  )
}

// ==================== HOSPITAL COMPONENTS ====================

// Highlight Text Component
export function HighlightText({ text, query }: { text: string; query: string }) {
  if (!query.trim()) return <>{text}</>

  const regex = new RegExp(`(${query.trim()})`, "gi")
  const parts = text.split(regex)

  return (
    <>
      {parts.map((part, i) =>
        regex.test(part) ? (
          <span key={i} className="bg-yellow-100 dark:bg-yellow-900">
            {part}
          </span>
        ) : (
          part
        ),
      )}
    </>
  )
}

// Empty Search Results Component
export function EmptySearchResults({ onClear }: { onClear: () => void }) {
  return (
    <div className="text-center py-8">
      <div className="inline-flex items-center justify-center w-12 h-12 rounded-full bg-muted mb-4">
        <Search className="h-6 w-6 text-muted-foreground" />
      </div>
      <h3 className="text-base font-medium mb-1">No hospitals found</h3>
      <p className="text-sm text-muted-foreground">Try adjusting your search or filters</p>
      <Button variant="outline" size="sm" className="mt-4" onClick={onClear}>
        Clear search
      </Button>
    </div>
  )
}

// Location Card Component
export function LocationCard({
  location,
  isSelected = false,
  onClick,
  searchQuery = "",
  className,
}: {
  location: Hospital
  isSelected?: boolean
  onClick?: () => void
  searchQuery?: string
  className?: string
}) {
  const [isHovered, setIsHovered] = useState(false)

  // Determine status badge color based on whether the location is open
  const statusColor = location.isOpen ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"

  return (
    <div
      className={cn(
        "bg-white rounded-lg border transition-shadow duration-200",
        isSelected && "ring-1 ring-primary shadow-md",
        isHovered && "shadow-sm",
        className,
      )}
      onClick={onClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{ padding: 8 }}
    >
      <div className="space-y-2">
        <div className="flex items-start justify-between">
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-sm truncate mb-1">
              {searchQuery ? <HighlightText text={location.name} query={searchQuery} /> : location.name}
            </h3>
            <div className="flex items-center text-xs text-muted-foreground">
              <MapPin className="mr-1 h-3 w-3 flex-shrink-0" />
              <span className="truncate">
                {searchQuery ? <HighlightText text={location.address} query={searchQuery} /> : location.address}
              </span>
            </div>
          </div>
          <Badge
            variant="outline"
            className={cn("flex items-center gap-0.5 whitespace-nowrap text-xs ml-2", "bg-secondary/20 text-secondary")}
          >
            <Clock className="h-2.5 w-2.5" />
            {location.estimatedTime}
          </Badge>
        </div>
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="flex items-center text-muted-foreground">
            <Phone className="mr-1 h-2.5 w-2.5 flex-shrink-0" />
            <span className="truncate">{location.phone}</span>
          </div>
          <div className={cn("flex items-center px-1.5 py-0.5 rounded-full", statusColor)}>
            <Clock className="mr-1 h-2.5 w-2.5 flex-shrink-0" />
            <span>{location.isOpen ? "Open Now" : "Closed"}</span>
          </div>
        </div>
      </div>

      <div className="flex justify-between pt-2 mt-2 border-t">
        <Button
          variant="outline"
          size="sm"
          className={cn("h-7 gap-1 text-xs px-2 flex-1 mr-2", isHovered && "bg-gray-50")}
        >
          <ExternalLink className="h-3 w-3" />
          <span>Directory</span>
        </Button>
        <Button size="sm" className={cn("h-7 gap-1 text-xs px-2 flex-1", isSelected && "bg-primary")}>
          <Navigation className="h-3 w-3" />
          <span>Directions</span>
        </Button>
      </div>
    </div>
  )
}

// Hospital List Component
export function HospitalList({
  hospitals,
  searchQuery,
  onClearSearch,
  className,
}: {
  hospitals: Hospital[]
  searchQuery: string
  onClearSearch: () => void
  className?: string
}) {
  const { selectedLocation, setSelectedLocation } = useMap()

  // Sort hospitals by distance for better user experience
  const sortedHospitals = useMemo(() => {
    if (!hospitals.length) return []

    return [...hospitals].sort((a, b) => {
      const distA = Number.parseFloat(a.distance)
      const distB = Number.parseFloat(b.distance)
      return distA - distB
    })
  }, [hospitals])

  if (hospitals.length === 0) {
    return <EmptySearchResults onClear={onClearSearch} />
  }

  return (
    <div className={`flex flex-col gap-2 ${className}`}>
      {sortedHospitals.map((hospital) => (
        <LocationCard
          key={hospital.id}
          location={hospital}
          isSelected={selectedLocation?.id === hospital.id}
          onClick={() => setSelectedLocation(hospital)}
          searchQuery={searchQuery}
        />
      ))}
    </div>
  )
}

// Search Input Component
export function SearchInput({
  value,
  onChange,
  placeholder = "Search",
  className,
}: {
  value: string
  onChange: (value: string) => void
  placeholder?: string
  className?: string
}) {
  const handleClear = () => {
    onChange("")
  }

  return (
    <div className={cn("relative w-full", className)}>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" aria-hidden="true" />
        <Input
          type="text"
          placeholder={placeholder}
          className="w-full pl-9 pr-9 h-10 text-base bg-secondary/30 border-0 focus-visible:ring-1 focus-visible:ring-primary/30"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          aria-label={placeholder}
        />
        {value && (
          <button
            type="button"
            onClick={handleClear}
            className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
            aria-label="Clear search"
          >
            <X className="h-4 w-4" />
          </button>
        )}
      </div>
    </div>
  )
}

// ==================== DIRECTIONS COMPONENTS ====================

// Transport Mode Selector Component
export function TransportModeSelector({ className }: { className?: string }) {
  const { transportMode, setTransportMode } = useMap()

  return (
    <div className={cn("flex rounded-md border overflow-hidden shadow-sm", className)}>
      <button
        className={cn(
          "flex-1 flex items-center justify-center gap-1 py-1.5 text-xs transition-colors",
          transportMode === "drive" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10",
        )}
        onClick={() => setTransportMode("drive")}
        aria-pressed={transportMode === "drive"}
      >
        <Car className="h-3 w-3" />
        <span>Drive</span>
      </button>
      <button
        className={cn(
          "flex-1 flex items-center justify-center gap-1 py-1.5 text-xs transition-colors border-l border-r",
          transportMode === "walk" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10",
        )}
        onClick={() => setTransportMode("walk")}
        aria-pressed={transportMode === "walk"}
      >
        <Walking className="h-3 w-3" />
        <span>Walk</span>
      </button>
      <button
        className={cn(
          "flex-1 flex items-center justify-center gap-1 py-1.5 text-xs transition-colors",
          transportMode === "transit" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10",
        )}
        onClick={() => setTransportMode("transit")}
        aria-pressed={transportMode === "transit"}
      >
        <Train className="h-3 w-3" />
        <span>Transit</span>
      </button>
    </div>
  )
}

// Directions Panel Component
export function DirectionsPanel({
  directions,
  className,
}: {
  directions: Directions
  className?: string
}) {
  return (
    <ScrollArea className={cn("h-[250px]", className)} style={{ paddingRight: 8 }}>
      <div className="flex flex-col gap-2">
        {directions.steps.map((step, index) => (
          <div key={index} className="relative pl-7 pb-2">
            {index < directions.steps.length - 1 && (
              <div className="absolute left-[10px] top-5 bottom-0 w-[1.5px] bg-primary/20" />
            )}
            <div className="flex items-start">
              <div className="absolute left-0 top-0 flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground">
                {index + 1}
              </div>
              <div className="space-y-0.5">
                <p className="text-xs">{step.instruction}</p>
                <p className="text-xs text-muted-foreground">
                  {step.distance} • {step.duration}
                </p>
              </div>
            </div>
          </div>
        ))}
        <div className="relative pl-7">
          <div className="flex items-start">
            <div className="absolute left-0 -top-0.5 flex h-5 w-5 items-center justify-center rounded-full bg-accent text-xs text-accent-foreground">
              <ArrowRight className="h-3 w-3" />
            </div>
            <p className="text-xs font-medium">Arrive at destination</p>
          </div>
        </div>
      </div>
    </ScrollArea>
  )
}

// Main Directions Card Component
export function DirectionsCard({
  hospital,
  directions,
  className,
}: {
  hospital: Hospital
  directions: Directions
  className?: string
}) {
  const { transportMode } = useMap()

  return (
    <Card className={cn("bg-white border border-gray-100 shadow-sm", className)}>
      <CardHeader className="pb-2 pt-3 px-3">
        <CardTitle className="text-sm">Directions to {hospital.name}</CardTitle>
        <CardDescription>
          <div className="flex items-center text-xs">
            <Clock className="mr-1 h-3 w-3 text-muted-foreground" />
            <span>
              {hospital.estimatedTime} {transportMode} • {hospital.distance}
            </span>
          </div>
        </CardDescription>
      </CardHeader>
      <CardContent className="pb-2 px-3">
        <TransportModeSelector className="mb-2" />
        <DirectionsPanel directions={directions} />
      </CardContent>
      <CardFooter className="pt-2 px-3">
        <Button variant="outline" size="sm" className="flex items-center gap-1 border-primary border-2 h-7 text-xs">
          <Volume2 className="h-3 w-3" />
          Audio
        </Button>
        <div className="flex-grow"></div>
        <Button size="sm" className="h-7 text-xs">
          Start Navigation
        </Button>
      </CardFooter>
    </Card>
  )
}


# ======================
# File: src\components\ui\avatar.tsx
# ======================

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


# ======================
# File: src\components\ui\badge.tsx
# ======================

import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }


# ======================
# File: src\components\ui\button.tsx
# ======================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
  },
)
Button.displayName = "Button"

export { Button, buttonVariants }


# ======================
# File: src\components\ui\card.tsx
# ======================

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
)
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
  ),
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
  ),
)
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />,
)
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
)
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# ======================
# File: src\components\ui\dropdown-menu.tsx
# ======================

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# ======================
# File: src\components\ui\input.tsx
# ======================

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = "Input"

export { Input }


# ======================
# File: src\components\ui\scroll-area.tsx
# ======================

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">{children}</ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


# ======================
# File: src\components\ui\tabs.tsx
# ======================

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className,
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


# ======================
# File: src\lib\constants.ts
# ======================

import type { Hospital, Directions } from "@/types/hospital"

// Z-index values for consistent layering
export const Z_INDEX = {
  base: 0,
  map: 10,
  header: 20,
  sidebar: 30,
  modal: 40,
  toast: 50,
}

export const SPACING = {
  sm: "0.75rem",
}

// Mock hospital data
export const hospitalLocations: Hospital[] = [
  {
    id: 1,
    name: "Chestnut Hill",
    address: "123 Main Street",
    coordinates: [-73.9857, 40.7484],
    phone: "(555) 123-4567",
    hours: "24/7 Emergency Services",
    distance: "2.4 miles",
    estimatedTime: "12 min",
    specialties: ["Emergency Care", "Surgery", "Cardiology"],
    isOpen: true,
  },
  {
    id: 2,
    name: "22 Patriot",
    address: "456 Park Avenue",
    coordinates: [-73.9654, 40.7829],
    phone: "(555) 234-5678",
    hours: "Mon-Fri: 8am-8pm, Sat-Sun: 9am-5pm",
    distance: "3.7 miles",
    estimatedTime: "18 min",
    specialties: ["Pediatrics", "Orthopedics", "Neurology"],
    isOpen: true,
  },
  {
    id: 3,
    name: "20 Patriot",
    address: "789 Broadway",
    coordinates: [-73.94, 40.73],
    phone: "(555) 345-6789",
    hours: "Mon-Fri: 7am-9pm, Sat: 8am-6pm, Sun: Closed",
    distance: "1.2 miles",
    estimatedTime: "8 min",
    specialties: ["Family Medicine", "Women's Health", "Mental Health"],
    isOpen: true,
  },
  {
    id: 4,
    name: "West Community Hospital",
    address: "321 Hudson Street, West Side",
    coordinates: [-74.006, 40.726],
    phone: "(555) 456-7890",
    hours: "24/7 Emergency Services",
    distance: "4.5 miles",
    estimatedTime: "22 min",
    specialties: ["Trauma Center", "Oncology", "Rehabilitation"],
    isOpen: true,
  },
]

export const mockDirections: Directions = {
  steps: [
    {
      instruction: "Head south on Broadway toward W 45th St",
      distance: "0.2 miles",
      duration: "1 min",
    },
    {
      instruction: "Turn right onto W 42nd St",
      distance: "0.5 miles",
      duration: "3 min",
    },
    {
      instruction: "Turn left onto 5th Ave",
      distance: "0.8 miles",
      duration: "4 min",
    },
    {
      instruction: "Continue onto Park Ave",
      distance: "0.6 miles",
      duration: "3 min",
    },
    {
      instruction: "Turn right onto E 34th St",
      distance: "0.3 miles",
      duration: "1 min",
    },
  ],
}


# ======================
# File: src\lib\hooks.ts
# ======================

"use client"

import { useState, useCallback, useMemo } from "react"
import type { Hospital } from "@/types/hospital"

/**
 * Custom hook for hospital search functionality
 */
export function useHospitalSearch(hospitals: Hospital[]) {
  const [searchQuery, setSearchQuery] = useState("")

  const handleSearchChange = useCallback((query: string) => {
    setSearchQuery(query)
  }, [])

  const filteredHospitals = useMemo(() => {
    if (!searchQuery.trim()) return hospitals

    const query = searchQuery.toLowerCase()
    return hospitals.filter(
      (hospital) =>
        hospital.name.toLowerCase().includes(query) ||
        hospital.address.toLowerCase().includes(query) ||
        hospital.specialties.some((specialty) => specialty.toLowerCase().includes(query)),
    )
  }, [hospitals, searchQuery])

  return {
    searchQuery,
    setSearchQuery: handleSearchChange,
    filteredHospitals,
  }
}


# ======================
# File: src\lib\utils.ts
# ======================

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

/**
 * Combines class names using clsx and tailwind-merge
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Debounces a function call
 */
export function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void {
  let timeout: ReturnType<typeof setTimeout> | null = null

  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}


# ======================
# File: src\types\hospital.ts
# ======================

export interface Coordinates {
  lat: number
  lng: number
}

export interface Hospital {
  id: number
  name: string
  address: string
  coordinates: [number, number]
  phone: string
  hours: string
  distance: string
  estimatedTime: string
  specialties: string[]
  isOpen?: boolean
}

export interface DirectionStep {
  instruction: string
  distance: string
  duration: string
}

export interface Directions {
  steps: DirectionStep[]
}

export type TransportMode = "drive" | "walk" | "transit"
