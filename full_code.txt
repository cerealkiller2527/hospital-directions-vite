Directory Tree:
hospital-directions-vite/
│   ├── .env
│   ├── .gitignore
│   ├── .pnp.cjs
│   ├── .pnp.loader.mjs
│   ├── components.json
│   ├── eslint.config.js
│   ├── full_code.txt
│   ├── index.html
│   ├── MAPBOX_INTEGRATION.md
│   ├── postcss.config.js
│   ├── README.md
│   ├── tailwind.config.js
│   ├── tsconfig.app.json
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   ├── vite.config.ts
│   ├── yarn.lock
│   ├── .git/ [EXCLUDED]
│   ├── .yarn/
│   │   ├── install-state.gz
│   │   ├── unplugged/
│   │   │   ├── @esbuild-win32-x64-npm-0.25.3-7a2812850f/
│   │   │   │   ├── node_modules/ [EXCLUDED]
│   │   │   ├── @rollup-rollup-win32-x64-msvc-npm-4.40.1-2ff5da5c9b/
│   │   │   │   ├── node_modules/ [EXCLUDED]
│   │   │   ├── @tailwindcss-oxide-win32-x64-msvc-npm-4.1.5-c83d4db805/
│   │   │   │   ├── node_modules/ [EXCLUDED]
│   │   │   ├── esbuild-npm-0.25.3-4d81c233e9/
│   │   │   │   ├── node_modules/ [EXCLUDED]
│   │   │   ├── lightningcss-win32-x64-msvc-npm-1.29.2-bede0b2d99/
│   │   │   │   ├── node_modules/ [EXCLUDED]
│   │   │   ├── node-gyp-npm-11.2.0-36aeb0fa50/
│   │   │   │   ├── node_modules/ [EXCLUDED]
│   ├── node_modules/ [EXCLUDED]
│   ├── public/
│   │   ├── bwh-logo-icon.svg
│   │   ├── placeholder-logo.png
│   │   ├── placeholder-logo.svg
│   │   ├── placeholder-user.jpg
│   │   ├── placeholder.jpg
│   │   ├── placeholder.svg
│   │   ├── vite.svg
│   ├── src/
│   │   ├── App.tsx
│   │   ├── full_code.txt
│   │   ├── index.css
│   │   ├── main.tsx
│   │   ├── components/
│   │   │   ├── Layout.tsx
│   │   │   ├── theme-provider.tsx
│   │   │   ├── map/
│   │   │   │   ├── MapControls.tsx
│   │   │   │   ├── MapErrorBoundary.tsx
│   │   │   │   ├── MapMarkers.tsx
│   │   │   │   ├── MapUIComponents.tsx
│   │   │   ├── ui/
│   │   │   │   ├── alert.tsx
│   │   │   │   ├── avatar.tsx
│   │   │   │   ├── badge.tsx
│   │   │   │   ├── button.tsx
│   │   │   │   ├── card.tsx
│   │   │   │   ├── dropdown-menu.tsx
│   │   │   │   ├── input.tsx
│   │   │   │   ├── popover.tsx
│   │   │   │   ├── scroll-area.tsx
│   │   │   │   ├── skeleton.tsx
│   │   │   │   ├── tabs.tsx
│   │   ├── contexts/
│   │   │   ├── MapContext.tsx
│   │   ├── lib/
│   │   │   ├── constants.ts
│   │   │   ├── mapbox.ts
│   │   │   ├── utils.ts
│   │   │   ├── hooks/
│   │   │   │   ├── useGeolocation.ts
│   │   │   │   ├── useHospitalData.ts
│   │   │   │   ├── useHospitalSearch.ts
│   │   │   ├── services/
│   │   │   │   ├── google-places-service.ts
│   │   │   │   ├── mapbox-service.ts
│   │   ├── types/
│   │   │   ├── hospital.ts




# ======================
# File: components.json
# ======================

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

# ======================
# File: index.html
# ======================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


# ======================
# File: MAPBOX_INTEGRATION.md
# ======================

# Mapbox Integration

This project uses Mapbox GL JS for all mapping features.

## Key Files

- `src/lib/mapbox.ts` - Core configuration and constants
- `src/lib/services/mapbox-service.ts` - Initialization and utility functions
- `src/components/map/MapErrorBoundary.tsx` - Error handling for map components
- `src/components/map/MapTest.tsx` - Test component for verifying Mapbox setup

## Setup for Development

1. Get a Mapbox access token from https://account.mapbox.com/
2. Create a `.env` file in the project root
3. Add your token: `VITE_MAPBOX_ACCESS_TOKEN=your_token_here`

## Available Map Styles

The following map styles are available through the `MAP_STYLES` object:

- `streets` (default) - Standard street map
- `outdoors` - Topographic street map
- `light` - Light color theme
- `dark` - Dark color theme
- `satellite` - Satellite imagery
- `satelliteStreets` - Satellite imagery with street overlays
- `navigationDay` - Navigation-focused map for daytime
- `navigationNight` - Navigation-focused map for nighttime

## Common Issues

- If the map doesn't load, check browser console for WebGL errors
- Ensure your token has the required scopes (minimal: styles:read)
- Some browsers may have WebGL disabled or restricted

## Implementation Notes

- The map is initialized in a React ref with proper cleanup on unmount
- All map interactions should be done through the MapContext
- Use the MapErrorBoundary component to handle map errors gracefully

## Next Steps

After Phase 1 (basic setup), the implementation will continue with:

1. Refactoring the MapProvider to use real Mapbox instances
2. Implementing hospital markers using Mapbox markers
3. Adding geocoding and search functionality
4. Implementing route directions and visualization 

# ======================
# File: README.md
# ======================

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```


# ======================
# File: tsconfig.app.json
# ======================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    /* Paths */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}


# ======================
# File: tsconfig.json
# ======================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}


# ======================
# File: tsconfig.node.json
# ======================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


# ======================
# File: vite.config.ts
# ======================

import path from "path"
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  server: {
    proxy: {
      // Proxy requests from /api/google-places to Google Places API
      '/api/google-places': {
        target: 'https://maps.googleapis.com/maps/api/place',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api\/google-places/, ''), // Remove base path
        secure: false, // Consider setting to true if target is HTTPS and valid cert
      },
    },
  },
})


# ======================
# File: src\App.tsx
# ======================

"use client"

import { useState, useMemo, useCallback, useRef, useEffect } from "react"
import { Navigation, Loader2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Skeleton } from "@/components/ui/skeleton"
import { useHospitalData } from "@/lib/hooks/useHospitalData"
import { useHospitalSearch } from "@/lib/hooks/useHospitalSearch"
import { useGeolocation } from "@/lib/hooks/useGeolocation"
import { AppHeader, SidebarContainer } from "@/components/Layout"
import { MapProvider, useMap } from "@/contexts/MapContext"
import { MapControls } from "@/components/map/MapControls"
import { MapMarkers, HospitalPopover } from "@/components/map/MapMarkers"
import { HospitalList, SearchInput, DirectionsCard } from "@/components/map/MapUIComponents"
import { initializeMap } from "@/lib/services/mapbox-service"
import { MAP_STYLE, DEFAULT_MAP_VIEW } from "@/lib/mapbox"
import { MapErrorBoundary } from "@/components/map/MapErrorBoundary"
import type { Directions, Hospital } from "@/types/hospital"

// Mock directions for now until API integration
const mockDirections: Directions = {
  steps: [
    {
      instruction: "Start at your location",
      distance: "0 miles",
      duration: "0 min",
    },
    {
      instruction: "Proceed to the destination",
      distance: "Varies",
      duration: "Varies",
    },
  ],
  distance: "N/A",
  duration: "N/A",
}

// Main Map Component to encapsulate Mapbox initialization
function MainMap() {
  const mapContainerRef = useRef<HTMLDivElement>(null)
  const { map, setMap, setZoom, selectedLocation } = useMap()

  useEffect(() => {
    if (map || !mapContainerRef.current) return

    const initializedMap = initializeMap(mapContainerRef.current, {
      style: MAP_STYLE,
      center: DEFAULT_MAP_VIEW.center as [number, number],
      zoom: DEFAULT_MAP_VIEW.zoom,
      minZoom: DEFAULT_MAP_VIEW.minZoom,
      maxZoom: DEFAULT_MAP_VIEW.maxZoom,
    })

    if (initializedMap) {
      initializedMap.on('load', () => {
        setMap(initializedMap)
        console.log("Main map loaded.")
      })

      initializedMap.on('zoom', () => {
        setZoom(initializedMap.getZoom())
      })

      // Initial resize
      initializedMap.resize()
    }

    return () => {
      initializedMap?.remove()
      setMap(null) // Clear map instance on unmount
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []) // Run only once on mount

  // Resize map when location selection changes (to ensure it fits)
  useEffect(() => {
    map?.resize()
  }, [map, selectedLocation])

  return (
    <div ref={mapContainerRef} className="absolute inset-0" data-testid="main-map-container" />
  )
}

// App Content Component
function AppContent() {
  const [activeTab, setActiveTab] = useState<"list" | "directions">("list")
  const [sidebarOpen, setSidebarOpen] = useState(true)

  // Fetch hospital data
  const { hospitals: allHospitals, loading: hospitalsLoading, error: hospitalsError } = useHospitalData()

  // Setup search based on fetched data
  const { filteredHospitals, searchQuery, setSearchQuery } = useHospitalSearch(allHospitals)

  const { map: mapInstance, selectedLocation, setSelectedLocation, userLocation, setUserLocation, flyTo } = useMap()
  const { location: geoLoc, loading: geoLoading, error: geoError, getCurrentPosition } = useGeolocation()

  useEffect(() => {
    if (geoLoc) {
      setUserLocation(geoLoc)
      flyTo(geoLoc, 14) // Fly to user location on first find
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [geoLoc]) // Run only when geoLoc changes

  const toggleSidebar = useCallback(() => {
    setSidebarOpen((prev) => !prev)
    // Trigger map resize after sidebar animation
    setTimeout(() => {
      mapInstance?.resize()
    }, 300) // Match transition duration
  }, [mapInstance])

  const handleClearSearch = useCallback(() => {
    setSearchQuery("")
  }, [setSearchQuery])

  const handleMyLocationClick = () => {
    if (userLocation) {
      flyTo(userLocation, 14)
    } else {
      getCurrentPosition() // Request location if not available
    }
  }

  // Prepare directions data (use mock for now)
  const currentDirections = useMemo(() => {
    if (activeTab === 'directions' && selectedLocation) {
      // TODO: Replace with actual API call in later phase
      return mockDirections
    }
    return null
  }, [activeTab, selectedLocation])

  const sidebarContent = useMemo(
    () => (
      <div className="flex flex-col gap-4 p-1 h-full">
        <SearchInput value={searchQuery} onChange={setSearchQuery} placeholder="Search hospitals..." />

        <Button
          size="sm"
          className="h-10 gap-1 w-full text-sm"
          onClick={handleMyLocationClick}
          disabled={geoLoading}
        >
          <Navigation className="h-4 w-4" />
          <span>{geoLoading ? 'Finding...' : 'My Location'}</span>
        </Button>
        {geoError && <p className="text-xs text-red-600 text-center">{geoError}</p>}

        <Tabs
          value={activeTab}
          onValueChange={(value) => setActiveTab(value as "list" | "directions")}
          className="w-full flex flex-col flex-grow"
        >
          <TabsList className="grid w-full grid-cols-2 h-9 flex-shrink-0">
            <TabsTrigger value="list" className="text-xs">List View</TabsTrigger>
            <TabsTrigger value="directions" className="text-xs">Directions</TabsTrigger>
          </TabsList>
          <TabsContent value="list" className="mt-2 flex-grow overflow-hidden">
            {hospitalsLoading ? (
              <div className="space-y-2 p-1">
                <Skeleton className="h-[100px] w-full" />
                <Skeleton className="h-[100px] w-full" />
                <Skeleton className="h-[100px] w-full" />
              </div>
            ) : hospitalsError ? (
              <div className="text-center py-8 text-sm text-red-600">{hospitalsError}</div>
            ) : (
              <HospitalList hospitals={filteredHospitals} searchQuery={searchQuery} onClearSearch={handleClearSearch} />
            )}
          </TabsContent>
          <TabsContent value="directions" className="mt-2 flex-shrink-0">
            {selectedLocation && currentDirections ? (
              <DirectionsCard hospital={selectedLocation} directions={currentDirections} />
            ) : (
              <div className="text-center py-8 text-sm text-muted-foreground">
                Select a hospital to view directions.
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    ),
    [searchQuery, setSearchQuery, handleMyLocationClick, geoLoading, geoError, activeTab, filteredHospitals, handleClearSearch, selectedLocation, currentDirections, hospitalsLoading, hospitalsError]
  )

  return (
    <div className="relative min-h-screen overflow-hidden">
      <AppHeader isSidebarOpen={sidebarOpen} onToggleSidebar={toggleSidebar} />
      <div className="relative pt-16 h-screen">
        <SidebarContainer isOpen={sidebarOpen}>{sidebarContent}</SidebarContainer>
        <div className="absolute top-16 bottom-0 left-0 right-0 z-0">
          <MainMap />
          <div className="absolute inset-0 pointer-events-none z-10">
            <MapMarkers hospitals={allHospitals} />
            <MapControls />
          </div>
          <HospitalPopover />
        </div>
      </div>
    </div>
  )
}

// Main App component wrapped with Provider and ErrorBoundary
export default function App() {
  return (
    <MapErrorBoundary fallback={<p>Map failed to load. Please refresh.</p>}>
      <MapProvider>
        <AppContent />
      </MapProvider>
    </MapErrorBoundary>
  )
}


# ======================
# File: src\index.css
# ======================

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 60 100% 100%;
    --foreground: 205 11% 4%;
    --card: 60 100% 100%;
    --card-foreground: 205 11% 4%;
    --popover: 60 100% 100%;
    --popover-foreground: 205 11% 4%;
    --primary: 205 100% 22%;
    --primary-foreground: 204 9% 95%;
    --secondary: 205 25% 62%;
    --secondary-foreground: 205 25% 10%;
    --muted: 205 25% 62%;
    --muted-foreground: 205 25% 22%;
    --accent: 209 44% 78%;
    --accent-foreground: 209 43% 10%;
    --destructive: 357 99% 45%;
    --destructive-foreground: 0 0% 100%;
    --border: 2 6% 90%;
    --input: 2 6% 90%;
    --ring: 205 100% 22%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 205 30% 8%;
    --foreground: 204 9% 95%;
    --card: 205 30% 12%;
    --card-foreground: 204 9% 95%;
    --popover: 205 30% 12%;
    --popover-foreground: 204 9% 95%;
    --primary: 205 91% 40%;
    --primary-foreground: 204 9% 95%;
    --secondary: 205 26% 15%;
    --secondary-foreground: 205 23% 95%;
    --muted: 205 26% 15%;
    --muted-foreground: 205 15% 65%;
    --accent: 209 49% 68%;
    --accent-foreground: 209 49% 10%;
    --destructive: 0 70% 45%;
    --destructive-foreground: 0 0% 100%;
    --border: 205 30% 18%;
    --input: 205 30% 18%;
    --ring: 205 91% 40%;
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom scrollbar styling */
.scrollbar-thin {
  scrollbar-width: thin;
  scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 4px;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.15);
  border-radius: 20px;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.25);
}


# ======================
# File: src\main.tsx
# ======================

import React from "react"
import ReactDOM from "react-dom/client"
import 'mapbox-gl/dist/mapbox-gl.css'; // Import Mapbox CSS
import App from "./App.tsx"
// import TestApp from "./TestApp.tsx" // Remove TestApp import
import "./index.css"
import { ThemeProvider } from "./components/theme-provider"

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
      {/* Render the main App component */}
      <App />
      {/* <TestApp /> */}
    </ThemeProvider>
  </React.StrictMode>,
)


# ======================
# File: src\components\Layout.tsx
# ======================

"use client"

import { useState, useEffect, useRef, type ReactNode } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Menu, X, Search, Bell } from "lucide-react"
import { cn } from "@/lib/utils"
import { Z_INDEX } from "@/lib/constants"

// ==================== APP HEADER ====================

interface AppHeaderProps {
  isSidebarOpen: boolean
  onToggleSidebar: () => void
}

export function AppHeader({ isSidebarOpen, onToggleSidebar }: AppHeaderProps) {
  return (
    <header className="fixed top-0 left-0 right-0 bg-background border-b" style={{ zIndex: Z_INDEX.header }}>
      <div className="container flex h-16 items-center justify-between px-4">
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="icon" onClick={onToggleSidebar}>
            {isSidebarOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            <span className="sr-only">{isSidebarOpen ? "Close sidebar" : "Open sidebar"}</span>
          </Button>
          <HospitalLogo />
        </div>

        <div className="flex items-center gap-2">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input type="text" placeholder="Search..." className="w-[200px] rounded-md pl-8 pr-4" aria-label="Search" />
          </div>
          <Button variant="outline" size="icon" className="rounded-md" aria-label="Notifications">
            <Bell className="h-4 w-4" />
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="rounded-full" aria-label="User menu">
                <Avatar className="h-8 w-8">
                  <AvatarImage src="/vibrant-street-market.png" alt="User avatar" />
                  <AvatarFallback>U</AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>Profile</DropdownMenuItem>
              <DropdownMenuItem>Settings</DropdownMenuItem>
              <DropdownMenuItem>Sign out</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  )
}

// Hospital Logo Component
function HospitalLogo({ className }: { className?: string }) {
  return (
    <a href="/" className={cn("flex items-center gap-2 group", className)}>
      <img src="/bwh-logo-icon.svg" alt="BWH Logo" className="h-12 w-auto" />
      <div className="flex flex-col">
        <span className="text-lg font-bold leading-tight text-primary group-hover:text-primary/90 transition-colors">
          Brigham and Women's
        </span>
        <span className="text-base leading-tight text-primary group-hover:text-primary/90 transition-colors">
          Hospital
        </span>
      </div>
    </a>
  )
}

// ==================== SIDEBAR CONTAINER ====================

interface SidebarContainerProps {
  children: ReactNode
  isOpen: boolean
  className?: string
}

export function SidebarContainer({ children, isOpen, className }: SidebarContainerProps) {
  const contentRef = useRef<HTMLDivElement>(null)
  const [contentHeight, setContentHeight] = useState<number | undefined>(undefined)

  // Calculate available height and update when window resizes
  useEffect(() => {
    const calculateHeights = () => {
      const headerHeight = 64 // 64px header
      const bottomPadding = 16 // 16px padding at bottom
      const availableHeight = window.innerHeight - headerHeight - bottomPadding

      if (contentRef.current) {
        const actualContentHeight = contentRef.current.scrollHeight

        if (actualContentHeight < availableHeight - 32) {
          setContentHeight(undefined) // Use auto height
        } else {
          setContentHeight(availableHeight - 32) // Fixed height with scrolling
        }
      }
    }

    calculateHeights()
    window.addEventListener("resize", calculateHeights)

    // Add mutation observer to detect DOM changes
    const mutationObserver = new MutationObserver(calculateHeights)
    if (contentRef.current) {
      mutationObserver.observe(contentRef.current, {
        childList: true,
        subtree: true,
        attributes: true,
      })
    }

    return () => {
      window.removeEventListener("resize", calculateHeights)
      mutationObserver.disconnect()
    }
  }, [])

  return (
    <div
      className={cn(
        "fixed top-16 left-0 z-30 w-[420px]",
        "transition-all duration-300 ease-in-out",
        !isOpen && "-translate-x-full",
        className,
      )}
      style={{
        maxHeight: `calc(100vh - 64px)`,
        padding: "1rem",
      }}
    >
      <div
        className="w-full bg-white rounded-xl shadow-xl border border-gray-100 overflow-hidden"
        style={{
          padding: "0.5rem",
          height: contentHeight === undefined ? "auto" : "auto",
          maxHeight: contentHeight ? `${contentHeight}px` : "calc(100vh - 64px - 32px)",
        }}
      >
        <div
          ref={contentRef}
          className="w-full overflow-y-auto rounded-lg bg-white scrollbar-thin"
          style={{
            padding: "0.75rem",
            height: contentHeight === undefined ? "auto" : `${contentHeight}px`,
            maxHeight: contentHeight === undefined ? "auto" : `${contentHeight}px`,
          }}
        >
          {children}
        </div>
      </div>
    </div>
  )
}


# ======================
# File: src\components\theme-provider.tsx
# ======================

"use client"

import type React from "react"

import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(() => (localStorage.getItem(storageKey) as Theme) || defaultTheme)

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined) throw new Error("useTheme must be used within a ThemeProvider")

  return context
}


# ======================
# File: src\components\map\MapControls.tsx
# ======================

"use client"

import { Plus, Minus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useMap } from "@/contexts/MapContext";

export function MapControls() {
  const { zoomIn, zoomOut, isMinZoom, isMaxZoom } = useMap();

  return (
    <div className="absolute bottom-8 right-8 z-10 flex flex-col gap-2">
      <Button
        variant="outline"
        size="icon"
        className="h-10 w-10 rounded-md shadow-md bg-white border-gray-200 hover:bg-gray-50 text-primary"
        aria-label="Zoom in"
        onClick={zoomIn}
        disabled={isMaxZoom}
      >
        <Plus className="h-5 w-5" />
      </Button>
      <Button
        variant="outline"
        size="icon"
        className="h-10 w-10 rounded-md shadow-md bg-white border-gray-200 hover:bg-gray-50 text-primary"
        aria-label="Zoom out"
        onClick={zoomOut}
        disabled={isMinZoom}
      >
        <Minus className="h-5 w-5" />
      </Button>
    </div>
  );
} 

# ======================
# File: src\components\map\MapErrorBoundary.tsx
# ======================

import { Component, ErrorInfo, ReactNode } from 'react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { getMapboxSupportStatus } from '@/lib/services/mapbox-service';

interface MapErrorBoundaryProps {
  children: ReactNode;
  fallback?: ReactNode;
}

interface MapErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

export class MapErrorBoundary extends Component<MapErrorBoundaryProps, MapErrorBoundaryState> {
  constructor(props: MapErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): MapErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    console.error("Map Error:", error, errorInfo);
  }

  render(): ReactNode {
    if (this.state.hasError) {
      const supportStatus = getMapboxSupportStatus();
      
      // If a custom fallback is provided, use it
      if (this.props.fallback) {
        return this.props.fallback;
      }
      
      // Default error UI
      return (
        <div className="absolute inset-0 flex items-center justify-center bg-white/90 z-30">
          <Card className="max-w-md mx-auto">
            <CardHeader>
              <CardTitle>Map Error</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm mb-4 text-muted-foreground">
                {supportStatus.supported === false 
                  ? supportStatus.reason 
                  : this.state.error?.message || "An error occurred loading the map."}
              </p>
            </CardContent>
            <CardFooter>
              <Button 
                onClick={() => window.location.reload()}
                variant="default"
              >
                Reload Page
              </Button>
            </CardFooter>
          </Card>
        </div>
      );
    }

    return this.props.children;
  }
} 

# ======================
# File: src\components\map\MapMarkers.tsx
# ======================

"use client"

import React, { useEffect, useRef } from 'react';
import mapboxgl, { MapMouseEvent } from 'mapbox-gl';
import { useMap } from '@/contexts/MapContext';
import type { Hospital } from '@/types/hospital';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Button } from "@/components/ui/button"; // Needed for PopoverTrigger asChild
import { MapPin, Phone, Globe, Clock } from 'lucide-react';
import { cn } from '@/lib/utils';

// We need a way to render the Popover outside the Mapbox DOM management
// This component now focuses ONLY on creating the DOM elements for Mapbox markers
// and associating them with hospital data via data attributes.
// Popover logic will be managed elsewhere (e.g., in AppContent or a dedicated wrapper).

export function MapMarkers({ hospitals }: { hospitals: Hospital[] }) {
  const { map, selectedLocation, setSelectedLocation, flyTo } = useMap();
  const markersRef = useRef<mapboxgl.Marker[]>([]); // Keep track of Mapbox markers

  // Cleanup markers on unmount or when map changes
  useEffect(() => {
    return () => {
      markersRef.current.forEach(marker => marker.remove());
      markersRef.current = [];
    };
  }, [map]);

  useEffect(() => {
    if (!map || !hospitals) return; // Guard against null map or hospitals

    // Remove existing markers before adding new ones
    markersRef.current.forEach(marker => marker.remove());
    markersRef.current = [];

    hospitals.forEach((hospital, index) => {
      // Skip if coordinates are missing (data fetch might have failed partially)
      if (!hospital.coordinates) {
        console.warn(`Skipping marker for ${hospital.name} due to missing coordinates.`);
        return;
      }

      const isSelected = selectedLocation?.id === hospital.id;

      // Create custom DOM element for the marker
      const el = document.createElement('div');
      el.className = 'marker-dom-element pointer-events-auto cursor-pointer'; // Unique class
      // Store hospital ID in a data attribute for later retrieval
      el.setAttribute('data-hospital-id', hospital.id.toString());
      // Add ARIA label for accessibility
      el.setAttribute('aria-label', `Map marker for ${hospital.name}`);
      el.setAttribute('role', 'button');
      el.innerHTML = `
        <div class="relative transition-transform duration-150 ease-in-out ${isSelected ? 'scale-110' : 'scale-100'}">
          <div class="h-6 w-6 rounded-full ${isSelected ? 'bg-accent' : 'bg-primary'} flex items-center justify-center text-primary-foreground text-xs font-bold shadow-lg ring-2 ${isSelected ? 'ring-accent ring-offset-accent/30' : 'ring-primary ring-offset-primary/30'} ring-offset-2 ring-offset-background transition-all">
            ${index + 1}
          </div>
          <div class="absolute -bottom-1 left-1/2 -translate-x-1/2 w-0 h-0 border-l-[6px] border-l-transparent border-t-[8px] ${isSelected ? 'border-t-accent' : 'border-t-primary'} border-r-[6px] border-r-transparent transition-colors"></div>
        </div>
      `;

      // Create Mapbox marker without popup
      const marker = new mapboxgl.Marker(el)
        .setLngLat(hospital.coordinates as [number, number])
        .addTo(map);

      // Add click event to the DOM element to select hospital and fly
      // The actual Popover opening will be handled externally based on selectedLocation
      el.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent map click event
        setSelectedLocation(hospital);
        flyTo(hospital.coordinates as [number, number], 14);
        // No marker.togglePopup() here - Popover is handled elsewhere
      });

      markersRef.current.push(marker); // Store Mapbox marker instance
    });

    // Deselect hospital when map is clicked (if not clicking a marker)
    const handleMapClick = (e: MapMouseEvent) => {
      const clickedOnMarker = (e.originalEvent.target as HTMLElement)?.closest('.marker-dom-element');
      if (!clickedOnMarker) {
        setSelectedLocation(null);
        // Also, close any potentially open Mapbox-managed popups if they existed
        // Although we removed the popup creation, this is good practice
        markersRef.current.forEach(marker => {
           // Check if popup exists AND is open before trying to toggle
          if (marker.getPopup()?.isOpen()) { 
            marker.togglePopup();
          }
        });
      }
    };

    map.on('click', handleMapClick);

    return () => {
      if (map && map.getStyle()) {
         map.off('click', handleMapClick);
      }
    };

  // Update markers when hospitals, map, or selection change
  }, [map, hospitals, selectedLocation, setSelectedLocation, flyTo]);

  // This component doesn't render anything itself in React tree
  return null;
}

// Separate component to render the Popover based on selectedLocation
// This component should be rendered within the main React tree, likely in AppContent
export function HospitalPopover() {
  const { selectedLocation, setSelectedLocation } = useMap();

  // Find the DOM element associated with the selected hospital marker
  // This requires the marker elements to have a unique identifier (e.g., data-hospital-id)
  const triggerElement = selectedLocation
    ? document.querySelector<HTMLElement>(`.marker-dom-element[data-hospital-id="${selectedLocation.id}"]`)
    : null;

  // Popover open state is controlled by whether a location is selected
  const isOpen = !!selectedLocation && !!triggerElement;

  return (
    <Popover open={isOpen} onOpenChange={(open: boolean) => !open && setSelectedLocation(null)}>
      <PopoverTrigger asChild>
        {/* Virtual trigger - We position the Popover manually or relative to the map container */}
        {/* Using a hidden button or linking directly to the map marker element if possible */}
        {/* For now, let's use a basic approach; positioning might need refinement */}
        <div
          ref={(node) => {
            // This part is tricky. We need to link the Popover to the marker's position.
            // Option 1: Use a library that integrates Popover with Mapbox.
            // Option 2: Calculate screen position from LngLat and position Popover absolutely.
            // Option 3 (Simpler but less accurate): Position relative to map container.
            // Let's defer precise positioning for now.
          }}
          style={{
            position: 'absolute',
            left: '50%', // Placeholder position
            top: '50%', // Placeholder position
            width: 0, height: 0, // Invisible trigger
            pointerEvents: 'none' // Ensure it doesn't interfere
          }}
        />
      </PopoverTrigger>
      <PopoverContent
        side="bottom"
        align="center"
        className="w-80 z-50 shadow-xl" // Ensure popover is above map elements
        onOpenAutoFocus={(e: Event) => e.preventDefault()} // Prevent focus stealing
        onInteractOutside={() => setSelectedLocation(null)} // Close on outside click
      >
        {selectedLocation && (
          <div className="grid gap-4 p-2">
            <div className="space-y-1">
              <h4 className="font-semibold leading-none text-base">{selectedLocation.name}</h4>
              <p className="text-sm text-muted-foreground">
                {selectedLocation.address || 'Address not available'}
              </p>
            </div>
            <div className="grid gap-2 text-sm">
              <div className="flex items-center gap-2">
                <Phone className="h-4 w-4 text-muted-foreground" />
                <span>{selectedLocation.phone || 'Phone not available'}</span>
              </div>
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4 text-muted-foreground" />
                {/* Display simplified hours or open status */}
                <span>
                  {selectedLocation.isOpen === true ? 'Open Now' : selectedLocation.isOpen === false ? 'Closed' : 'Hours vary'}
                  {selectedLocation.hours && ` (${selectedLocation.hours})`}
                </span>
              </div>
              {selectedLocation.website && (
                <div className="flex items-center gap-2">
                  <Globe className="h-4 w-4 text-muted-foreground" />
                  <a href={selectedLocation.website} target="_blank" rel="noopener noreferrer" className="text-primary underline underline-offset-2 hover:text-primary/80 truncate">
                    {selectedLocation.website.replace(/^https?:\/\//, '')}
                  </a>
                </div>
              )}
            </div>
          </div>
        )}
      </PopoverContent>
    </Popover>
  );
} 

# ======================
# File: src\components\map\MapUIComponents.tsx
# ======================

"use client"

import React, { useState, useMemo } from "react";
import {
  MapPin,
  Navigation,
  Clock,
  Phone,
  ExternalLink,
  Search,
  X,
  Volume2,
  ArrowRight,
} from "lucide-react";
import { Car, FootprintsIcon as Walking, Train } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";
import type { Hospital, Directions, TransportMode } from "@/types/hospital";
import { useMap } from "@/contexts/MapContext";

// Highlight Text Component
export function HighlightText({ text, query }: { text: string; query: string }) {
  if (!query.trim()) return <>{text}</>;

  const regex = new RegExp(`(${query.trim()})`, "gi");
  const parts = text.split(regex);

  return (
    <>
      {parts.map((part, i) =>
        regex.test(part) ? (
          <span key={i} className="bg-yellow-100 dark:bg-yellow-900">
            {part}
          </span>
        ) : (
          part
        ),
      )}
    </>
  );
}

// Empty Search Results Component
export function EmptySearchResults({ onClear }: { onClear: () => void }) {
  return (
    <div className="text-center py-8">
      <div className="inline-flex items-center justify-center w-12 h-12 rounded-full bg-muted mb-4">
        <Search className="h-6 w-6 text-muted-foreground" />
      </div>
      <h3 className="text-base font-medium mb-1">No hospitals found</h3>
      <p className="text-sm text-muted-foreground">Try adjusting your search or filters</p>
      <Button variant="outline" size="sm" className="mt-4" onClick={onClear}>
        Clear search
      </Button>
    </div>
  );
}

// Location Card Component
export function LocationCard({
  location,
  isSelected = false,
  onClick,
  searchQuery = "",
  className,
}: {
  location: Hospital;
  isSelected?: boolean;
  onClick?: () => void;
  searchQuery?: string;
  className?: string;
}) {
  const { flyTo } = useMap();
  const [isHovered, setIsHovered] = useState(false);

  // Use derived isOpen status from fetched data
  const statusColor = location.isOpen === true ? "bg-green-100 text-green-700" : location.isOpen === false ? "bg-red-100 text-red-700" : "bg-gray-100 text-gray-700";
  const statusText = location.isOpen === true ? "Open Now" : location.isOpen === false ? "Closed" : "Hours vary";

  const handleClick = () => {
    if (onClick) onClick();
    // Fly to hospital location if coordinates exist
    if (location.coordinates) {
      flyTo(location.coordinates as [number, number], 14);
    }
  };

  return (
    <div
      className={cn(
        "bg-white rounded-lg border transition-shadow duration-200 cursor-pointer",
        isSelected && "ring-1 ring-primary shadow-md",
        isHovered && "shadow-sm",
        className,
      )}
      onClick={handleClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{ padding: 8 }}
    >
      <div className="space-y-2">
        <div className="flex items-start justify-between gap-2">
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-sm truncate mb-1">
              {searchQuery ? <HighlightText text={location.name} query={searchQuery} /> : location.name}
            </h3>
            <div className="flex items-center text-xs text-muted-foreground">
              <MapPin className="mr-1 h-3 w-3 flex-shrink-0" />
              <span className="truncate">
                {searchQuery ? <HighlightText text={location.address || 'N/A'} query={searchQuery} /> : (location.address || 'Address unavailable')}
              </span>
            </div>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="flex items-center text-muted-foreground">
            <Phone className="mr-1 h-2.5 w-2.5 flex-shrink-0" />
            <span className="truncate">{location.phone || 'N/A'}</span>
          </div>
          <div className={cn("flex items-center justify-center px-1.5 py-0.5 rounded-full text-center", statusColor)}>
            <Clock className="mr-1 h-2.5 w-2.5 flex-shrink-0" />
            <span>{statusText}</span>
          </div>
        </div>
      </div>

      <div className="flex justify-between pt-2 mt-2 border-t">
        <Button
          variant="outline"
          size="sm"
          className={cn("h-7 gap-1 text-xs px-2 flex-1 mr-2", isHovered && "bg-gray-50")}
          onClick={(e) => e.stopPropagation()} // Prevent card click
          // Disable if no website available
          disabled={!location.website}
        >
          <ExternalLink className="h-3 w-3" />
          {location.website ? (
            <a href={location.website} target="_blank" rel="noopener noreferrer" className="truncate">
              Website
            </a>
          ) : (
            <span>Website N/A</span>
          )}
        </Button>
        <Button
          size="sm"
          className={cn("h-7 gap-1 text-xs px-2 flex-1", isSelected && "bg-primary")}
          onClick={(e) => {
            e.stopPropagation();
            // TODO: Trigger directions tab/state change
            console.log("Directions button clicked for:", location.name);
          }}
          // Disable if no coordinates for directions
          disabled={!location.coordinates}
        >
          <Navigation className="h-3 w-3" />
          <span>Directions</span>
        </Button>
      </div>
    </div>
  );
}

// Hospital List Component
export function HospitalList({
  hospitals,
  searchQuery,
  onClearSearch,
  className,
}: {
  hospitals: Hospital[];
  searchQuery: string;
  onClearSearch: () => void;
  className?: string;
}) {
  const { selectedLocation, setSelectedLocation } = useMap();

  // Sort hospitals by name as distance isn't available yet
  const sortedHospitals = useMemo(() => {
    return [...hospitals].sort((a, b) => a.name.localeCompare(b.name));
  }, [hospitals]);

  if (hospitals.length === 0 && searchQuery) {
    return <EmptySearchResults onClear={onClearSearch} />;
  }

  return (
    // Added overflow-y-auto and height constraint to make list scrollable
    <ScrollArea className={cn("flex-grow h-[calc(100%-4rem)]", className)}> 
      <div className="flex flex-col gap-2 p-1"> {/* Added padding */} 
        {sortedHospitals.map((hospital) => (
          <LocationCard
            key={hospital.id}
            location={hospital}
            isSelected={selectedLocation?.id === hospital.id}
            onClick={() => setSelectedLocation(hospital)}
            searchQuery={searchQuery}
          />
        ))}
      </div>
     </ScrollArea>
  );
}

// Search Input Component
export function SearchInput({
  value,
  onChange,
  placeholder = "Search",
  className,
}: {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
}) {
  const handleClear = () => {
    onChange("");
  };

  return (
    <div className={cn("relative w-full", className)}>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" aria-hidden="true" />
        <Input
          type="text"
          placeholder={placeholder}
          className="w-full pl-9 pr-9 h-10 text-base bg-secondary/30 border-0 focus-visible:ring-1 focus-visible:ring-primary/30"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          aria-label={placeholder}
        />
        {value && (
          <button
            type="button"
            onClick={handleClear}
            className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
            aria-label="Clear search"
          >
            <X className="h-4 w-4" />
          </button>
        )}
      </div>
    </div>
  );
}

// Transport Mode Selector Component
export function TransportModeSelector({ className }: { className?: string }) {
  const { transportMode, setTransportMode } = useMap();

  return (
    <div className={cn("flex rounded-md border overflow-hidden shadow-sm", className)}>
      <button
        className={cn(
          "flex-1 flex items-center justify-center gap-1 py-1.5 text-xs transition-colors",
          transportMode === "drive" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10",
        )}
        onClick={() => setTransportMode("drive")}
        aria-pressed={transportMode === "drive"}
      >
        <Car className="h-3 w-3" />
        <span>Drive</span>
      </button>
      <button
        className={cn(
          "flex-1 flex items-center justify-center gap-1 py-1.5 text-xs transition-colors border-l border-r",
          transportMode === "walk" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10",
        )}
        onClick={() => setTransportMode("walk")}
        aria-pressed={transportMode === "walk"}
      >
        <Walking className="h-3 w-3" />
        <span>Walk</span>
      </button>
      <button
        className={cn(
          "flex-1 flex items-center justify-center gap-1 py-1.5 text-xs transition-colors",
          transportMode === "transit" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10",
        )}
        onClick={() => setTransportMode("transit")}
        aria-pressed={transportMode === "transit"}
      >
        <Train className="h-3 w-3" />
        <span>Transit</span>
      </button>
    </div>
  );
}

// Directions Panel Component
export function DirectionsPanel({
  directions,
  className,
}: {
  directions: Directions;
  className?: string;
}) {
  return (
    <ScrollArea className={cn("h-[250px]", className)} style={{ paddingRight: 8 }}>
      <div className="flex flex-col gap-2">
        {directions.steps.map((step, index) => (
          <div key={index} className="relative pl-7 pb-2">
            {index < directions.steps.length - 1 && (
              <div className="absolute left-[10px] top-5 bottom-0 w-[1.5px] bg-primary/20" />
            )}
            <div className="flex items-start">
              <div className="absolute left-0 top-0 flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground">
                {index + 1}
              </div>
              <div className="space-y-0.5">
                <p className="text-xs">{step.instruction}</p>
                <p className="text-xs text-muted-foreground">
                  {step.distance} • {step.duration}
                </p>
              </div>
            </div>
          </div>
        ))}
        <div className="relative pl-7">
          <div className="flex items-start">
            <div className="absolute left-0 -top-0.5 flex h-5 w-5 items-center justify-center rounded-full bg-accent text-xs text-accent-foreground">
              <ArrowRight className="h-3 w-3" />
            </div>
            <p className="text-xs font-medium">Arrive at destination</p>
          </div>
        </div>
      </div>
    </ScrollArea>
  );
}

// Main Directions Card Component
export function DirectionsCard({
  hospital,
  directions,
  className,
}: {
  hospital: Hospital;
  directions: Directions;
  className?: string;
}) {
  const { transportMode } = useMap();

  // Use fetched hospital name/address, directions distance/duration (from mock for now)
  const estimatedTime = directions.duration || "N/A";
  const distance = directions.distance || "N/A";

  return (
    <Card className={cn("bg-white border border-gray-100 shadow-sm", className)}>
      <CardHeader className="pb-2 pt-3 px-3">
        <CardTitle className="text-sm">Directions to {hospital.name}</CardTitle>
        <CardDescription>
          <div className="flex items-center text-xs">
            <Clock className="mr-1 h-3 w-3 text-muted-foreground" />
            <span>
              {estimatedTime} {transportMode} • {distance}
            </span>
          </div>
        </CardDescription>
      </CardHeader>
      <CardContent className="pb-2 px-3">
        <TransportModeSelector className="mb-2" />
        <DirectionsPanel directions={directions} />
      </CardContent>
      <CardFooter className="pt-2 px-3">
        <Button variant="outline" size="sm" className="flex items-center gap-1 border-primary border-2 h-7 text-xs">
          <Volume2 className="h-3 w-3" />
          Audio
        </Button>
        <div className="flex-grow"></div>
        <Button size="sm" className="h-7 text-xs">
          Start Navigation
        </Button>
      </CardFooter>
    </Card>
  );
} 

# ======================
# File: src\components\ui\alert.tsx
# ======================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


# ======================
# File: src\components\ui\avatar.tsx
# ======================

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


# ======================
# File: src\components\ui\badge.tsx
# ======================

import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }


# ======================
# File: src\components\ui\button.tsx
# ======================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
  },
)
Button.displayName = "Button"

export { Button, buttonVariants }


# ======================
# File: src\components\ui\card.tsx
# ======================

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
)
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
  ),
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
  ),
)
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />,
)
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
)
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# ======================
# File: src\components\ui\dropdown-menu.tsx
# ======================

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# ======================
# File: src\components\ui\input.tsx
# ======================

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = "Input"

export { Input }


# ======================
# File: src\components\ui\popover.tsx
# ======================

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }


# ======================
# File: src\components\ui\scroll-area.tsx
# ======================

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">{children}</ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


# ======================
# File: src\components\ui\skeleton.tsx
# ======================

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }


# ======================
# File: src\components\ui\tabs.tsx
# ======================

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className,
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


# ======================
# File: src\contexts\MapContext.tsx
# ======================

"use client"

import { createContext, useContext, useState, useCallback, type ReactNode, Dispatch, SetStateAction } from "react"
import type { Hospital, TransportMode } from "@/types/hospital"
import type mapboxgl from 'mapbox-gl';
import { DEFAULT_MAP_VIEW } from '@/lib/mapbox';

interface MapContextType {
  selectedLocation: Hospital | null
  setSelectedLocation: Dispatch<SetStateAction<Hospital | null>>
  transportMode: TransportMode
  setTransportMode: Dispatch<SetStateAction<TransportMode>>
  zoom: number
  setZoom: Dispatch<SetStateAction<number>>
  map: mapboxgl.Map | null;
  setMap: Dispatch<SetStateAction<mapboxgl.Map | null>>;
  userLocation: [number, number] | null;
  setUserLocation: Dispatch<SetStateAction<[number, number] | null>>;
  // Derived state for convenience
  isMinZoom: boolean
  isMaxZoom: boolean
  // Methods (implemented in provider)
  zoomIn: () => void
  zoomOut: () => void
  flyTo: (center: [number, number], zoomLevel?: number) => void
}

const MapContext = createContext<MapContextType | undefined>(undefined)

export function useMap() {
  const context = useContext(MapContext)
  if (!context) {
    throw new Error("useMap must be used within a MapProvider")
  }
  return context
}

interface MapProviderProps {
  children: ReactNode
  initialHospital?: Hospital | null
}

export function MapProvider({ children, initialHospital = null }: MapProviderProps) {
  const [selectedLocation, setSelectedLocation] = useState<Hospital | null>(initialHospital);
  const [transportMode, setTransportMode] = useState<TransportMode>("drive");
  const [zoom, setZoom] = useState(DEFAULT_MAP_VIEW.zoom);
  const [map, setMap] = useState<mapboxgl.Map | null>(null);
  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);

  const isMinZoom = zoom <= DEFAULT_MAP_VIEW.minZoom;
  const isMaxZoom = zoom >= DEFAULT_MAP_VIEW.maxZoom;

  const zoomIn = useCallback(() => {
    map?.zoomIn();
  }, [map]);

  const zoomOut = useCallback(() => {
    map?.zoomOut();
  }, [map]);

  const flyTo = useCallback((center: [number, number], zoomLevel?: number) => {
    map?.flyTo({ center, zoom: zoomLevel ?? map.getZoom() });
  }, [map]);

  const value = {
    selectedLocation,
    setSelectedLocation,
    transportMode,
    setTransportMode,
    zoom,
    setZoom, // Expose setter for map events
    map,
    setMap,
    userLocation,
    setUserLocation,
    isMinZoom,
    isMaxZoom,
    zoomIn,
    zoomOut,
    flyTo,
  }

  return <MapContext.Provider value={value}>{children}</MapContext.Provider>
} 

# ======================
# File: src\lib\constants.ts
# ======================

import type { Hospital, Directions } from "@/types/hospital"

// Z-index values for consistent layering
export const Z_INDEX = {
  base: 0,
  map: 10,
  header: 20,
  sidebar: 30,
  modal: 40,
  toast: 50,
}

export const SPACING = {
  sm: "0.75rem",
}

// Base list of hospitals to fetch details for
// Using corrected names and query hints based on the provided image
export const baseHospitalData: Array<{ id: number; name: string; queryHint: string }> = [
  { id: 1, name: "Chestnut Hill", queryHint: "Chestnut Hill Medical Center, 25 Boylston St, Chestnut Hill, MA 02467" },
  { id: 2, name: "Patriot Place", queryHint: "20 Patriot Pl, Foxboro, MA 02035" }, // Assuming ID 2 corresponds to 20 Patriot Pl
  { id: 3, name: "22 Patriot Place", queryHint: "22 Patriot Pl, Foxboro, MA 02035" }, // Keep distinct entry based on image row 3
  { id: 4, name: "Faulkner", queryHint: "Faulkner Hospital, 1153 Centre St, Jamaica Plain, MA 02130" },
  { id: 0, name: "Main Campus", queryHint: "Brigham and Women's Hospital Main Campus, 75 Francis St, Boston, MA 02115" },
]

// Note: Old mock hospitalLocations and mockDirections are removed.
// Actual hospital data (coordinates, address, phone, hours) will be fetched using Google Places API.


# ======================
# File: src\lib\mapbox.ts
# ======================

// Mapbox GL configuration and constants
export const MAPBOX_ACCESS_TOKEN = import.meta.env.VITE_MAPBOX_ACCESS_TOKEN || '';

// Validate access token
if (!MAPBOX_ACCESS_TOKEN) {
  console.error('Missing Mapbox access token. Set VITE_MAPBOX_ACCESS_TOKEN in your .env file.');
}

// Default map style
export const MAP_STYLE = 'mapbox://styles/mapbox/streets-v11';

// Available map styles
export const MAP_STYLES = {
  streets: 'mapbox://styles/mapbox/streets-v11',
  outdoors: 'mapbox://styles/mapbox/outdoors-v11',
  light: 'mapbox://styles/mapbox/light-v10',
  dark: 'mapbox://styles/mapbox/dark-v10',
  satellite: 'mapbox://styles/mapbox/satellite-v9',
  satelliteStreets: 'mapbox://styles/mapbox/satellite-streets-v11',
  navigationDay: 'mapbox://styles/mapbox/navigation-day-v1',
  navigationNight: 'mapbox://styles/mapbox/navigation-night-v1'
};

// Default map configuration
export const DEFAULT_MAP_VIEW = {
  center: [-71.1496, 42.3263], // Boston area
  zoom: 12,
  minZoom: 8,
  maxZoom: 18,
  pitch: 0,
  bearing: 0
}; 

# ======================
# File: src\lib\utils.ts
# ======================

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

/**
 * Combines class names using clsx and tailwind-merge
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Debounces a function call
 */
export function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void {
  let timeout: ReturnType<typeof setTimeout> | null = null

  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}


# ======================
# File: src\lib\hooks\useGeolocation.ts
# ======================

"use client"

import { useState, useCallback, useEffect } from "react";

interface GeolocationState {
  location: [number, number] | null;
  error: string | null;
  loading: boolean;
}

/**
 * Hook to get user's current location using the Geolocation API
 */
export function useGeolocation(options?: PositionOptions): GeolocationState & { getCurrentPosition: () => void } {
  const [state, setState] = useState<GeolocationState>({
    location: null,
    error: null,
    loading: false,
  });

  const getCurrentPosition = useCallback(() => {
    if (!navigator.geolocation) {
      setState(prev => ({ ...prev, error: 'Geolocation is not supported by your browser' }));
      return;
    }

    setState(prev => ({ ...prev, loading: true, error: null }));

    navigator.geolocation.getCurrentPosition(
      (position) => {
        setState({
          location: [position.coords.longitude, position.coords.latitude],
          error: null,
          loading: false,
        });
      },
      (err) => {
        setState({
          location: null,
          error: `Error getting location: ${err.message}`,
          loading: false,
        });
      },
      options
    );
  }, [options]);

  return { ...state, getCurrentPosition };
} 

# ======================
# File: src\lib\hooks\useHospitalData.ts
# ======================

import { useState, useEffect } from 'react';
import type { Hospital } from '@/types/hospital';
import { baseHospitalData } from '@/lib/constants'; // Using constants directly
import { findPlaceId, getPlaceDetails } from '@/lib/services/google-places-service';

interface HospitalDataState {
  hospitals: Hospital[];
  loading: boolean;
  error: string | null;
}

/**
 * Hook to fetch and enrich hospital data using Google Places API.
 */
export function useHospitalData(): HospitalDataState {
  const [state, setState] = useState<HospitalDataState>({
    // Initialize with base data structure but empty details initially
    hospitals: baseHospitalData.map(h => ({ id: h.id, name: h.name })), 
    loading: true,
    error: null,
  });

  useEffect(() => {
    let isMounted = true; // Prevent state update on unmounted component

    const fetchHospitalData = async () => {
      // Keep initial loading state until all fetches complete
      // setState(prev => ({ ...prev, loading: true, error: null })); 
      try {
        const enrichedHospitalsPromises = baseHospitalData.map(async (baseHospital) => {
          const placeId = await findPlaceId(baseHospital.queryHint);
          if (placeId) {
            const details = await getPlaceDetails(placeId);
            if (details) {
              // Merge base info (id, original name) with fetched details
              return {
                id: baseHospital.id, 
                name: baseHospital.name, 
                ...details, 
              };
            } else {
               console.warn(`Could not fetch details for ${baseHospital.name} (Place ID: ${placeId})`);
               // Return base data + placeId if details fetch failed
               return { id: baseHospital.id, name: baseHospital.name, placeId };
            }
          } else {
             console.warn(`Could not find Place ID for ${baseHospital.name} using query: ${baseHospital.queryHint}`);
             // Return only base data if Place ID not found
             return { id: baseHospital.id, name: baseHospital.name };
          }
        });

        // Wait for all promises to resolve
        const resolvedHospitals = await Promise.all(enrichedHospitalsPromises);

        if (isMounted) {
          // Filter out any potential null/undefined results if needed, though current logic returns objects
          const finalHospitals = resolvedHospitals.filter(h => h) as Hospital[];
          setState({ hospitals: finalHospitals, loading: false, error: null });
        }
      } catch (err) {
        console.error("Error fetching hospital data:", err);
        if (isMounted) {
          setState(prev => ({ ...prev, loading: false, error: 'Failed to load hospital data.' }));
        }
      }
    };

    fetchHospitalData();

    return () => {
      isMounted = false; // Cleanup function to set isMounted to false
    };
  }, []); // Fetch only once on mount

  return state;
} 

# ======================
# File: src\lib\hooks\useHospitalSearch.ts
# ======================

"use client"

import { useState, useCallback, useMemo } from "react"
import type { Hospital } from "@/types/hospital"

/**
 * Custom hook for hospital search functionality
 */
export function useHospitalSearch(hospitals: Hospital[]) {
  const [searchQuery, setSearchQuery] = useState("");

  const handleSearchChange = useCallback((query: string) => {
    setSearchQuery(query);
  }, []);

  const filteredHospitals = useMemo(() => {
    if (!searchQuery.trim()) return hospitals;

    const query = searchQuery.toLowerCase();
    // Filter only by name and address as requested
    return hospitals.filter(
      (hospital) =>
        hospital.name.toLowerCase().includes(query) ||
        hospital.address.toLowerCase().includes(query)
        // Removed specialty filtering
        // || hospital.specialties.some((specialty) => specialty.toLowerCase().includes(query)),
    );
  }, [hospitals, searchQuery]);

  return {
    searchQuery,
    setSearchQuery: handleSearchChange,
    filteredHospitals,
  };
} 

# ======================
# File: src\lib\services\google-places-service.ts
# ======================

/// <reference types="vite/client" />

import type { Hospital } from '@/types/hospital';

const API_KEY = import.meta.env.VITE_GOOGLE_PLACES_API_KEY || '';
// Remove BASE_URL as we use relative proxy path
// const BASE_URL = 'https://maps.googleapis.com/maps/api/place';

if (!API_KEY) {
  console.error('Missing Google Places API key. Set VITE_GOOGLE_PLACES_API_KEY in your .env file.');
}

/**
 * Finds the Place ID for a given query using Google Places Text Search API.
 * Uses the Vite proxy defined in vite.config.ts for CORS.
 */
export async function findPlaceId(query: string): Promise<string | null> {
  if (!API_KEY) return null;
  // Use relative proxy path defined in vite.config.ts
  const url = `/api/google-places/textsearch/json?query=${encodeURIComponent(query)}&key=${API_KEY}`;

  try {
    const response = await fetch(url);
    if (!response.ok) {
      // Log more details on failure
      const errorBody = await response.text();
      console.error(`Google Places Text Search failed: ${response.status} ${response.statusText}`, errorBody);
      throw new Error(`Google Places Text Search failed with status ${response.status}`);
    }
    const data = await response.json();
    if (data.status === 'OK' && data.results && data.results.length > 0) {
      return data.results[0].place_id;
    }
    // Log Google's error message if available
    console.warn(`Google Places Text Search status not OK for query "${query}": ${data.status}`, data.error_message || data.status);
    return null;
  } catch (error) {
    console.error(`Error finding place ID for query "${query}":`, error);
    return null;
  }
}

/**
 * Fetches detailed information for a place using its Place ID.
 * Uses the Vite proxy defined in vite.config.ts for CORS.
 */
export async function getPlaceDetails(placeId: string): Promise<Partial<Hospital> | null> {
  if (!API_KEY) return null;
  const fields = 'place_id,name,geometry,formatted_address,international_phone_number,opening_hours,website';
  // Use relative proxy path defined in vite.config.ts
  const url = `/api/google-places/details/json?place_id=${placeId}&fields=${fields}&key=${API_KEY}`;

  try {
    const response = await fetch(url);
     if (!response.ok) {
       // Log more details on failure
       const errorBody = await response.text();
       console.error(`Google Places Details failed: ${response.status} ${response.statusText}`, errorBody);
      throw new Error(`Google Places Details failed with status ${response.status}`);
    }
    const data = await response.json();
    if (data.status === 'OK' && data.result) {
      const result = data.result;
      const details: Partial<Hospital> = {
        placeId: result.place_id,
        coordinates: result.geometry?.location ? [result.geometry.location.lng, result.geometry.location.lat] : undefined,
        address: result.formatted_address,
        phone: result.international_phone_number,
        openingHours: result.opening_hours ? {
          open_now: result.opening_hours.open_now,
          periods: result.opening_hours.periods,
          weekday_text: result.opening_hours.weekday_text,
        } : undefined,
        isOpen: result.opening_hours?.open_now,
        hours: result.opening_hours?.weekday_text?.[0]?.split(': ')?.[1],
        website: result.website,
      };
      return details;
    }
    // Log Google's error message if available
    console.warn(`Google Places Details status not OK for placeId "${placeId}": ${data.status}`, data.error_message || data.status);
    return null;
  } catch (error) {
    console.error(`Error getting place details for placeId "${placeId}":`, error);
    return null;
  }
} 

# ======================
# File: src\lib\services\mapbox-service.ts
# ======================

import mapboxgl from 'mapbox-gl';
import { MAPBOX_ACCESS_TOKEN } from '@/lib/mapbox';

// Set the access token globally
mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

/**
 * Check if Mapbox GL is supported in the current browser
 */
export function isMapboxSupported(): boolean {
  return mapboxgl.supported();
}

/**
 * Get detailed Mapbox support status with reason if not supported
 */
export function getMapboxSupportStatus(): { supported: boolean; reason?: string } {
  if (mapboxgl.supported()) {
    return { supported: true };
  }
  
  // WebGL detection
  if (!window.WebGLRenderingContext) {
    return { 
      supported: false, 
      reason: "Your browser doesn't support WebGL, which is required for Mapbox GL."
    };
  }
  
  // Check if a canvas can get a WebGL context
  const canvas = document.createElement('canvas');
  const context = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
  if (!context) {
    return { 
      supported: false, 
      reason: "Your browser supports WebGL, but it may be disabled or unavailable."
    };
  }
  
  return { 
    supported: false, 
    reason: "Mapbox GL isn't supported by your browser for an unknown reason."
  };
}

/**
 * Initialize a Mapbox map with error handling
 */
export function initializeMap(
  container: HTMLElement,
  options: Partial<mapboxgl.MapOptions> = {}
): mapboxgl.Map | null {
  if (!isMapboxSupported()) {
    console.error('Mapbox GL is not supported in this browser.');
    return null;
  }
  
  try {
    return new mapboxgl.Map({
      container,
      style: options.style,
      center: options.center,
      zoom: options.zoom,
      ...options
    });
  } catch (error) {
    console.error('Error initializing Mapbox GL:', error);
    return null;
  }
} 

# ======================
# File: src\types\hospital.ts
# ======================

export interface Coordinates {
  lat: number
  lng: number
}

// Type definition for Google Places opening hours periods
export interface PlaceOpeningHoursPeriod {
  open: { day: number; time: string };
  close?: { day: number; time: string }; // Optional for 24/7 places
}

// Type definition for Google Places opening hours
export interface PlaceOpeningHours {
  open_now?: boolean;
  periods?: PlaceOpeningHoursPeriod[];
  weekday_text?: string[];
}

export interface Hospital {
  id: number
  name: string
  address?: string
  coordinates?: [number, number]
  phone?: string
  hours?: string
  isOpen?: boolean

  // Google Places specific fields (optional)
  placeId?: string
  website?: string
  openingHours?: PlaceOpeningHours
}

export interface DirectionStep {
  instruction: string
  distance: string
  duration: string
}

export interface Directions {
  steps: DirectionStep[]
  distance?: string
  duration?: string
}

export type TransportMode = "drive" | "walk" | "transit"
